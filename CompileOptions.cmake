option(ENABLE_SANITIZER "Enable ASan+LSan+UBSan sanitizer (Debug build only)" OFF)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

add_definitions(-D_XOPEN_SOURCE=600)

if(CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_C_COMPILER_ID STREQUAL "GNU")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=gnu99")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wextra")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wconversion")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wstrict-prototypes")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wuninitialized")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wshadow")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wformat=2")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wcast-align")
	if(CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL "5")
		set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror=incompatible-pointer-types")
	endif()
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-parameter")
else()
	message(FATAL_ERROR "unsupported compiler")
endif()

if(CMAKE_BUILD_TYPE)
	string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_TOLOWER)
	if(CMAKE_BUILD_TYPE_TOLOWER STREQUAL "debug")
		if(ENABLE_SANITIZER)
			if(UNIX AND (CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_C_COMPILER_ID STREQUAL "GNU")) 
				# enable AddressSanitizer + LeakSanitizer + UndefinedBehaviorSanitizer
                        	set (ASAN_OPTIONS "fast_unwind_on_malloc=0:strict_string_checks=1:detect_stack_use_after_return=1")
                        	add_definitions(-DASAN_OPTIONS="${ASAN_OPTIONS}")
				set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=address")
				set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=undefined")
				set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fno-sanitize-recover=undefined")
				set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fno-omit-frame-pointer")
				set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fno-optimize-sibling-calls")
			endif()

		endif()
	endif()
endif()
